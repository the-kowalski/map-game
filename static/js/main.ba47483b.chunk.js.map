{"version":3,"sources":["components/OpenMap.module.css","components/Map.js","components/Game.js","App.js","reportWebVitals.js","index.js","components/Game.module.css"],"names":["module","exports","mapboxgl","accessToken","workerClass","require","default","markers","userMarker","solutionMarker","Map","gamePhase","currentCity","setUserCoordinates","mapContainer","useRef","map","useState","lng","setLng","lat","setLat","zoom","setZoom","displaySolution","useCallback","Marker","color","setLngLat","addTo","current","userMarkerLngLat","getLngLat","solutionMarkerLngLat","addSource","type","data","properties","geometry","coordinates","addLayer","id","source","layout","paint","drawDistanceLine","removeSolution","remove","removeLayer","removeSource","useEffect","container","style","center","on","e","userLng","userLat","marker","placeUserMarker","lngLat","getCenter","toFixed","getZoom","ref","className","styles","ALL_CITIES","JSON","parse","stringify","cities","initialGameState","phase","score","numOfGuessedCities","currentCityDifference","userCoordinates","finished","gameStateReducer","state","action","payload","city","newScore","difference","isCorrect","console","log","Game","setCities","useReducer","gameState","dispatchGameState","gameControls","name","onClick","Math","round","distance","units","index","floor","random","length","finishBanner","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba47483b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mapContainer\":\"OpenMap_mapContainer__SXaVi\"};","import mapboxgl from \"mapbox-gl\";\nimport React, { useRef, useEffect, useState, useCallback } from \"react\";\nimport styles from \"./OpenMap.module.css\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\nmapboxgl.accessToken =\n  \"pk.eyJ1Ijoia293YWxza2lkZXY3IiwiYSI6ImNrc2htdzBzNTAxcXQyb25jdmt2OTEwbDYifQ.Y7w2cwT7wBZWB17prVvSWA\";\n\n// eslint-disable-next-line import/no-webpack-loader-syntax\nmapboxgl.workerClass = require('worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker').default;\n\nlet markers = {\n  userMarker: null,\n  solutionMarker: null,\n};\n\nconst Map = ({ gamePhase, currentCity, setUserCoordinates }) => {\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [lng, setLng] = useState(15);\n  const [lat, setLat] = useState(55);\n  const [zoom, setZoom] = useState(3);\n\n  const placeUserMarker = (userLng, userLat) => {\n    if (gamePhase === \"displayResult\") return;\n    if (markers.userMarker !== null) {\n      markers.userMarker.remove();\n      markers.userMarker = null;\n    }\n    const marker = new mapboxgl.Marker({\n      color: \"#eb9534\",\n    })\n      .setLngLat([userLng, userLat])\n      .addTo(map.current);\n    markers.userMarker = marker;\n    setUserCoordinates(userLng, userLat);\n  };\n\n  const drawDistanceLine = (map, userMarkerLngLat, solutionMarkerLngLat) => {\n    map.current.addSource(\"route\", {\n      type: \"geojson\",\n      data: {\n        type: \"Feature\",\n        properties: {},\n        geometry: {\n          type: \"LineString\",\n          coordinates: [\n            [userMarkerLngLat.lng, userMarkerLngLat.lat],\n            [solutionMarkerLngLat.lng, solutionMarkerLngLat.lat],\n          ],\n        },\n      },\n    });\n    map.current.addLayer({\n      id: \"route\",\n      type: \"line\",\n      source: \"route\",\n      layout: {\n        \"line-join\": \"round\",\n        \"line-cap\": \"round\",\n      },\n      paint: {\n        \"line-color\": \"#888\",\n        \"line-width\": 8,\n      },\n    });\n  };\n\n  const displaySolution = useCallback(() => {\n    //Add Solution Marker\n    const solutionMarker = new mapboxgl.Marker({\n      color: \"#5ceb34\",\n    })\n      .setLngLat([currentCity.lng, currentCity.lat])\n      .addTo(map.current);\n    markers.solutionMarker = solutionMarker;\n    //Add Distance Line\n    const userMarkerLngLat = markers.userMarker.getLngLat();\n    const solutionMarkerLngLat = markers.solutionMarker.getLngLat();\n    drawDistanceLine(map, userMarkerLngLat, solutionMarkerLngLat);\n  }, [currentCity.lng, currentCity.lat]);\n\n  const removeSolution = useCallback(() => {\n    //remove markers\n    markers.userMarker.remove();\n    markers.userMarker = null;\n    markers.solutionMarker.remove();\n    markers.solutionMarker = null;\n    //remove line\n    map.current.removeLayer(\"route\");\n    map.current.removeSource(\"route\");\n    //clearSolutionMarker\n    markers.solutionMarker = null;\n  }, []);\n\n  useEffect(() => {\n    if (markers.userMarker === null) return;\n    if (gamePhase === \"guessing\") {\n      removeSolution();\n    }\n    if (gamePhase === \"displayResult\") {\n      displaySolution();\n    }\n  }, [gamePhase, displaySolution, removeSolution]);\n\n  useEffect(() => {\n    if (map.current) return;\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: \"mapbox://styles/kowalskidev7/ckshnj6z698is17pjzhlguevd\",\n      center: [lng, lat],\n      zoom: zoom,\n    });\n    map.current.on(\"click\", (e) => {\n      placeUserMarker(e.lngLat.lng, e.lngLat.lat);\n    });\n  });\n\n  useEffect(() => {\n    if (!map.current) return;\n    map.current.on(\"move\", () => {\n      setLng(map.current.getCenter().lng.toFixed(4));\n      setLat(map.current.getCenter().lat.toFixed(4));\n      setZoom(map.current.getZoom().toFixed(2));\n    });\n  });\n\n  return (\n    <div>\n      <div ref={mapContainer} className={styles.mapContainer} />\n    </div>\n  );\n};\n\nexport default Map;\n","import distance from \"@turf/distance\";\nimport { useEffect, useReducer, useState } from \"react\";\n\nimport Map from \"./Map\";\nimport styles from \"./Game.module.css\";\nimport cities from \"../data/cities.json\";\n\nconst ALL_CITIES = JSON.parse(JSON.stringify(cities));\n\nconst initialGameState = {\n  phase: \"guessing\",\n  score: 1500,\n  numOfGuessedCities: 0,\n  currentCity: ALL_CITIES.cities[0],\n  currentCityDifference: 0,\n  userCoordinates: null,\n  finished: false,\n};\n\nconst gameStateReducer = (state, action) => {\n  switch (action.type) {\n    case \"newGame\":\n      return initialGameState;\n    case \"nextRound\":\n      return {\n        ...state,\n        phase: \"guessing\",\n        currentCity: action.payload.city,\n        currentCityDifference: 0,\n        userCoordinates: null,\n      };\n    case \"checkedSolution\":\n      let newScore = state.score - action.payload.difference;\n      const isCorrect = action.payload.difference <= 50 ? true : false;\n      return {\n        ...state,\n        phase: \"displayResult\",\n        score: newScore < 0 ? 0 : newScore,\n        numOfGuessedCities: isCorrect\n          ? state.numOfGuessedCities + 1\n          : state.numOfGuessedCities,\n        currentCityDifference: action.payload.difference,\n        finished: newScore <= 0 ? true : false,\n      };\n    case \"placedUserMarker\":\n      return {\n        ...state,\n        userCoordinates: { lng: action.payload.lng, lat: action.payload.lat },\n      };\n    default:\n      console.log(\"Error\");\n  }\n};\n\nconst Game = () => {\n  const [cities, setCities] = useState(ALL_CITIES.cities);\n  const [gameState, dispatchGameState] = useReducer(\n    gameStateReducer,\n    initialGameState\n  );\n\n  useEffect(() => {\n    setCities(ALL_CITIES.cities);\n  }, []);\n\n  const checkSolutionHandler = () => {\n    const difference = Math.round(\n      distance(\n        [gameState.userCoordinates.lng, gameState.userCoordinates.lat],\n        [gameState.currentCity.lng, gameState.currentCity.lat],\n        { units: \"kilometers\" }\n      )\n    );\n    dispatchGameState({ type: \"checkedSolution\", payload: { difference } });\n  };\n\n  const nextRoundHandler = () => {\n    const index = Math.floor(Math.random() * cities.length);\n    const city = cities[index];\n    dispatchGameState({ type: \"nextRound\", payload: { city } });\n  };\n\n  const newGameHandler = () => {\n    dispatchGameState({ type: \"newGame\" });\n  };\n\n  return (\n    <section>\n      <Map\n        gamePhase={gameState.phase}\n        currentCity={gameState.currentCity}\n        setUserCoordinates={(lng, lat) =>\n          dispatchGameState({ type: \"placedUserMarker\", payload: { lng, lat } })\n        }\n      />\n      <div className={styles.gameControls}>\n        <div>\n          <p>{`${gameState.numOfGuessedCities} ${\n            gameState.numOfGuessedCities === 1 ? \"city\" : \"cities\"\n          } placed correctly`}</p>\n          <p>{`${gameState.score}km left`}</p>\n          <hr />\n          <p>{`Select the location of ${gameState.currentCity.name}!`}</p>\n        </div>\n        {gameState.phase === \"guessing\" && gameState.userCoordinates !== null && (\n          <div>\n            <button className=\"button\" onClick={checkSolutionHandler}>\n              Check!\n            </button>\n          </div>\n        )}\n        {gameState.phase === \"displayResult\" && (\n          <div>\n            {gameState.currentCityDifference <= 50 ? (\n              <h4 style={{ color: \"green\" }}>Correct!</h4>\n            ) : (\n              <h4 style={{ color: \"red\" }}>Failed!</h4>\n            )}\n            <p>{`Distance: ${gameState.currentCityDifference}km`}</p>\n            {!gameState.finished && (\n              <button className=\"button\" onClick={nextRoundHandler}>\n                Next!\n              </button>\n            )}\n          </div>\n        )}\n      </div>\n      {gameState.finished && (\n        <div className={styles.finishBanner}>\n          <h2>{`You guessed ${gameState.numOfGuessedCities} ${\n            gameState.numOfGuessedCities === 1 ? \"city\" : \"cities\"\n          } correctly!`}</h2>\n          <button className=\"button\" onClick={newGameHandler}>\n            New Game\n          </button>\n        </div>\n      )}\n    </section>\n  );\n};\n\nexport default Game;\n","import \"./App.css\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameControls\":\"Game_gameControls__61M5E\",\"finishBanner\":\"Game_finishBanner__3lGvd\"};"],"sourceRoot":""}